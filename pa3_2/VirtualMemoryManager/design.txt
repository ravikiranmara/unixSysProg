From the problem description, we see the following modules being identified for us readily. 

BackingStore 
    - represents the backing store(persistant storage of computer). The programs and files soted here are brought to memory.
 a   - the memory is accessed in terms of chunks. (here page size), in real world, we might get more than a single page at at time. 

PhysicalMemory
    - RAM divided into frames. Each frame is of page size
    - number of frames depends on the size of physical memory

PageTable
    - Contains the mapping of virtual address to physical address
    - more specifically page number to frame number

TLB
    - translation lookaside buffer
    - cache to hold page number -> frame number mapping

VirtualMemoryManager
    - the module that overlooks memory management
    - translates the virtual address to physical address
    - (in our case) reads from the memory
 
Page
    - represents a page of memory

=====================================


Main Logic
-----------------

The program reads a set of logical address from a file, converts it to physical address and reads data. 

A page table maintains a mapping of all the logical address to physical address. Not all of the pages are loaded into memory. whenever a request for a logical address is issued (by cpu), we check in the page table to see if corresponding data is loaded in physical memory. If this is not the case, we get a page fault. 

The physical address space is managed by us. Whenever there is a page fault, we load the required memory from the backing store to physical memory. 

Once the data is loaded to one of the frame in physical memory, we store the frame number in the page table. 


Flow chart
-----------------

- address.txt is the list of address. The output is written to a file correct_check.txt

$ ./vmm address.txt 


main()
{
    parse args

    run(args[1]); // input file name

    return;
}

run(string inputfilename)
{
    initialize vmm;

    read address from input;
    call vmm->readByte();

    return;
}

vmm::initialize()
{
    inititalize page table;
    initialize tlb;

    initialize physical memory
    initialize backing store
}

vmm::readbyte()
{
    vmm::translate();
    get frame number

    form physical address
    physicalMemory.get(physical address);

    return pagetable->frame;
}


vmm::translate(address)
{
    lookup tlb;

    if(tlb miss)
    {
        lookup page table;
        if(page fault)
        {
            get page from backing store;
            load it to physical memory;
            update page table;
        }

        update tlb table
    }

    return frame number;
}


PhysicalMemory, BackingStore, TLB, PageTable are simple and provide basic get, put functionality
